{"version":3,"sources":["docs/examples/TextInput/ExampleError.js","docs/examples/TextInput/ExampleOptional.js","components/RegistrationForm/RegistrationForm.js","docs/examples/RegistrationForm/ExampleRegistrationForm.js","components/TextInputStyledComponents/TextInputStyledComponents.js","docs/examples/TextInputStyledComponents/ExampleError.js","components/HelloWorld/HelloWorld.js","docs/examples/HelloWorld/ExampleHelloWorld.js","components/TextInputCSSModules/TextInputCSSModules.js","docs/examples/TextInputCSSModules/ExampleError.js","components/TextInputBEM/TextInputBEM.js","docs/examples/TextInputBEM/ExampleError.js","components/Label/Label.js","components/Label/index.js","components/ProgressBar/ProgressBar.js","components/ProgressBar/index.js","components/TextInput/TextInput.js","components/TextInput/index.js","docs/examples sync /^/.*$","docs/Navigation.js","docs/CodeExample.js","docs/Example.js","docs/Props.js","docs/ComponentPage.js","docs/Docs.js","index.js","components/EyeIcon/EyeIcon.js","components/EyeIcon/index.js","components/PasswordInput/PasswordInput.js","components/PasswordInput/index.js","../config/componentData.js","docs/examples/EyeIcon/Example.js","docs/examples/Label/ExampleOptional.js","docs/examples/Label/ExampleRequired.js","docs/examples/PasswordInput/ExampleAllFeatures.js","docs/examples/ProgressBar/Example100Percent.js","docs/examples/ProgressBar/Example10Percent.js","docs/examples/ProgressBar/Example70Percent.js"],"names":["ExampleError","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","ps_react_TextInput__WEBPACK_IMPORTED_MODULE_6__","htmlId","label","name","onChange","required","error","React","Component","ExampleOptional","RegistrationForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","event","user","state","target","value","setState","onSubmit","validate","submitted","email","password","errors","length","minPasswordLength","parseInt","_ref","concat","getOwnPropertyNames","_this$state","_this$state$user","react_default","confirmationMessage","TextInput","PasswordInput","quality","passwordQuality","showVisibilityToggle","maxLength","type","onClick","defaultProps","ExampleRegistrationForm","console","log","components_RegistrationForm_RegistrationForm","_ref$type","_ref$required","placeholder","children","objectWithoutProperties","Error","styled","div","_templateObject","Input","input","_templateObject2","Fieldset","_templateObject3","Label","htmlFor","assign","id","TextInputStyledComponents","HelloWorld","message","ExampleHelloWorld","HelloWorld_HelloWorld","__webpack_require__","d","__webpack_exports__","className","styles","fieldset","inputError","TextInputCSSModules","TextInputBEM","style","display","color","Label_Label","ProgressBar","getColor","percent","getWidthAsPercentOfTotalWidth","width","_this$props","height","border","backgroundColor","components_ProgressBar_ProgressBar","marginBottom","TextInput_TextInput","map","./EyeIcon/Example","./EyeIcon/Example.js","./HelloWorld/ExampleHelloWorld","./HelloWorld/ExampleHelloWorld.js","./Label/ExampleOptional","./Label/ExampleOptional.js","./Label/ExampleRequired","./Label/ExampleRequired.js","./PasswordInput/ExampleAllFeatures","./PasswordInput/ExampleAllFeatures.js","./ProgressBar/Example100Percent","./ProgressBar/Example100Percent.js","./ProgressBar/Example10Percent","./ProgressBar/Example10Percent.js","./ProgressBar/Example70Percent","./ProgressBar/Example70Percent.js","./RegistrationForm/ExampleRegistrationForm","./RegistrationForm/ExampleRegistrationForm.js","./TextInput/ExampleError","./TextInput/ExampleError.js","./TextInput/ExampleOptional","./TextInput/ExampleOptional.js","./TextInputBEM/ExampleError","./TextInputBEM/ExampleError.js","./TextInputCSSModules/ExampleError","./TextInputCSSModules/ExampleError.js","./TextInputStyledComponents/ExampleError","./TextInputStyledComponents/ExampleError.js","webpackContext","req","webpackContextResolve","o","e","code","keys","resolve","module","exports","Navigation","components","key","href","CodeExample","hljs","registerLanguage","javascript","highlightBlock","element","ref","Example","toggleCode","preventDefault","prevState","showCode","_this$props$example","example","description","ExampleComponent","require","componentName","default","docs_CodeExample","Props","defaultValue","ComponentPage","component","examples","docs_Example","docs_Props","Docs","route","window","location","hash","substr","_this2","addEventListener","componentData","filter","docs_Navigation","docs_ComponentPage","ReactDOM","render","Docs_Docs","document","getElementById","EyeIcon","xmlns","viewBox","transform","fill","cx","cy","r","EyeIcon_EyeIcon","toggleShowPassword","showPassword","marginLeft","components_PasswordInput_PasswordInput","computed","EyeIconExample","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","ps_react_EyeIcon__WEBPACK_IMPORTED_MODULE_1__","ps_react_Label__WEBPACK_IMPORTED_MODULE_1__","ExampleRequired","ExampleAllFeatures","C_react_ps_react_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_0__","C_react_ps_react_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_2__","C_react_ps_react_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_3__","ps_react_PasswordInput__WEBPACK_IMPORTED_MODULE_6__","minLength","getQuality","Example100Percent","ps_react_ProgressBar__WEBPACK_IMPORTED_MODULE_1__","Example10Percent","Example70Percent"],"mappings":"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","file":"static/js/main.f34ac91e.chunk.js","sourcesContent":["import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Optional TextBox */\nexport default class ExampleOptional extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n       />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport TextInput from '../TextInput';\nimport PasswordInput from '../PasswordInput';\n\n/** Registration form with built-in validation. */\nclass RegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      user: {\n        email: '',\n        password: ''\n      },\n      errors: {},\n      submitted: false,\n    };\n  }\n\n  onChange = (event) => {\n    const user = this.state.user;\n    user[event.target.name] = event.target.value;\n    this.setState({user});\n  }\n\n  // Returns a number from 0 to 100 that represents password quality.\n  // For simplicity, just returning % of min length entered.\n  // Could enhance with checks for number, special char, unique characters, etc.\n  passwordQuality(password) {\n    if (!password) return null;\n    if (password.length >= this.props.minPasswordLength) return 100;\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\n    return percentOfMinLength;\n  }\n\n  validate({email, password}) {\n    const errors = {};\n    const {minPasswordLength} = this.props;\n\n    if (!email) errors.email = 'Email required.';\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\n\n    this.setState({errors});\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\n    return formIsValid;\n  }\n\n  onSubmit = () => {\n    const {user} = this.state;\n    const formIsValid = this.validate(user);\n    if (formIsValid) {\n      this.props.onSubmit(user);\n      this.setState({submitted: true});\n    }\n  }\n\n  render() {\n    const {errors, submitted} = this.state;\n    const {email, password} = this.state.user;\n\n    return (\n      submitted ?\n      <h2>{this.props.confirmationMessage}</h2> :\n      <div>\n        <TextInput\n          htmlId=\"registration-form-email\"\n          name=\"email\"\n          onChange={this.onChange}\n          label=\"Email\"\n          value={email}\n          error={errors.email}\n          required />\n\n        <PasswordInput\n          htmlId=\"registration-form-password\"\n          name=\"password\"\n          value={password}\n          onChange={this.onChange}\n          quality={this.passwordQuality(password)}\n          showVisibilityToggle\n          maxLength={50}\n          error={errors.password} />\n\n        <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\n      </div>\n    )\n  }\n}\n\nRegistrationForm.propTypes = {\n  /** Message displayed upon successful submission */\n  confirmationMessage: PropTypes.string,\n\n  /** Called when form is submitted */\n  onSubmit: PropTypes.func.isRequired,\n\n  /** Minimum password length */\n  minPasswordLength: PropTypes.number\n}\n\nRegistrationForm.defaultProps = {\n  confirmationMessage: \"Thanks for registering!\",\n  minPasswordLength: 8\n};\n\nexport default RegistrationForm;\n","import React from 'react';\nimport RegistrationForm from 'ps-react/RegistrationForm';\n\nexport default class ExampleRegistrationForm extends React.Component {\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styled from 'styled-components';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  const Error = styled.div`\n    color: red;\n  `\n\n  const Input = styled.input`\n    border: ${error && 'solid 1px red'};\n    display: block;\n  `;\n\n  const Fieldset = styled.div`\n    margin-bottom: 16px;\n  `;\n\n  return (\n    <Fieldset>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <Input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        {...props}/>\n        {children}\n      {error && <Error>{error}</Error>}\n    </Fieldset>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputStyledComponents from 'ps-react/TextInputStyledComponents';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComponents\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A super lame component that says Hello with a custom message. */\r\nfunction HelloWorld({message}) {\r\n  return <div>Hello {message}</div>\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n/** Message to display */\r\nmessage: PropTypes.string\r\n};\r\n\r\nHelloWorld.defaultProps = {\r\n  message: 'World'\r\n};\r\n\r\nexport default HelloWorld;\r\n","import React from 'react';\nimport HelloWorld from 'ps-react/HelloWorld';\n\n\n/** Custom message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Pluralsight viewers!\" />\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\nimport styles from './textInput.css';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className={styles.fieldset}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && styles.inputError}\n        {...props}/>\n        {children}\n      {error && <div className={styles.error}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputCSSModules\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div className=\"textinput\">\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        className={error && 'textinput__input--state-error'}\n        {...props}/>\n        {children}\n      {error && <div className=\"textinput__error\">{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n/** Required TextBox with error */\nexport default class ExampleError extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"example-optional\"\n        label=\"First Name\"\n        name=\"firstname\"\n        onChange={() => {}}\n        required\n        error=\"First name is required.\"\n       />\n    )\n  }\n}\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\n/** Label with required field display, htmlFor, and block styling */\nfunction Label({htmlFor, label, required}) {\n  return (\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\n      {label} { required && <span style={{color: 'red'}}> *</span> }\n    </label>\n  )\n}\n\nLabel.propTypes = {\n  /** HTML ID for associated input */\n  htmlFor: PropTypes.string.isRequired,\n\n  /** Label text */\n  label: PropTypes.string.isRequired,\n\n  /** Display asterisk after label if true */\n  required: PropTypes.bool\n};\n\nexport default Label;\n","export {default} from './Label';\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nclass ProgressBar extends React.Component {\n  getColor = (percent) => {\n    if (this.props.percent === 100) return 'green';\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\n  }\n\n  getWidthAsPercentOfTotalWidth = () => {\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\n  }\n\n  render() {\n    const {percent, width, height} = this.props;\n    return (\n      <div style={{border: 'solid 1px lightgray', width: width}}>\n        <div style={{\n          width: this.getWidthAsPercentOfTotalWidth(),\n          height,\n          backgroundColor: this.getColor(percent)\n        }} />\n      </div>\n    );\n  }\n}\n\nProgressBar.propTypes = {\n  /** Percent of progress completed */\n  percent: PropTypes.number.isRequired,\n\n  /** Bar width */\n  width: PropTypes.number.isRequired,\n\n  /** Bar height */\n  height: PropTypes.number\n};\n\nProgressBar.defaultProps = {\n  height: 5\n};\n\nexport default ProgressBar;","export {default} from './ProgressBar.js';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Label from '../Label';\n\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\n  return (\n    <div style={{marginBottom: 16}}>\n      <Label htmlFor={htmlId} label={label} required={required} />\n      <input\n        id={htmlId}\n        type={type}\n        name={name}\n        placeholder={placeholder}\n        value={value}\n        onChange={onChange}\n        style={error && {border: 'solid 1px red'}}\n        {...props}/>\n        {children}\n      {error && <div className=\"error\" style={{color: 'red'}}>{error}</div>}\n    </div>\n  );\n};\n\nTextInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\n  name: PropTypes.string.isRequired,\n\n  /** Input label */\n  label: PropTypes.string.isRequired,\n\n  /** Input type */\n  type: PropTypes.oneOf(['text', 'number', 'password']),\n\n  /** Mark label with asterisk if set to true */\n  required: PropTypes.bool,\n\n  /** Function to call onChange */\n  onChange: PropTypes.func.isRequired,\n\n  /** Placeholder to display when empty */\n  placeholder: PropTypes.string,\n\n  /** Value */\n  value: PropTypes.any,\n\n  /** String to display when error occurs */\n  error: PropTypes.string,\n\n  /** Child component to display next to the input */\n  children: PropTypes.node\n};\n\nexport default TextInput;\n","export {default} from './TextInput';\n","var map = {\n\t\"./EyeIcon/Example\": 93,\n\t\"./EyeIcon/Example.js\": 93,\n\t\"./HelloWorld/ExampleHelloWorld\": 104,\n\t\"./HelloWorld/ExampleHelloWorld.js\": 104,\n\t\"./Label/ExampleOptional\": 94,\n\t\"./Label/ExampleOptional.js\": 94,\n\t\"./Label/ExampleRequired\": 95,\n\t\"./Label/ExampleRequired.js\": 95,\n\t\"./PasswordInput/ExampleAllFeatures\": 96,\n\t\"./PasswordInput/ExampleAllFeatures.js\": 96,\n\t\"./ProgressBar/Example100Percent\": 97,\n\t\"./ProgressBar/Example100Percent.js\": 97,\n\t\"./ProgressBar/Example10Percent\": 98,\n\t\"./ProgressBar/Example10Percent.js\": 98,\n\t\"./ProgressBar/Example70Percent\": 99,\n\t\"./ProgressBar/Example70Percent.js\": 99,\n\t\"./RegistrationForm/ExampleRegistrationForm\": 102,\n\t\"./RegistrationForm/ExampleRegistrationForm.js\": 102,\n\t\"./TextInput/ExampleError\": 100,\n\t\"./TextInput/ExampleError.js\": 100,\n\t\"./TextInput/ExampleOptional\": 101,\n\t\"./TextInput/ExampleOptional.js\": 101,\n\t\"./TextInputBEM/ExampleError\": 106,\n\t\"./TextInputBEM/ExampleError.js\": 106,\n\t\"./TextInputCSSModules/ExampleError\": 105,\n\t\"./TextInputCSSModules/ExampleError.js\": 105,\n\t\"./TextInputStyledComponents/ExampleError\": 103,\n\t\"./TextInputStyledComponents/ExampleError.js\": 103\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 203;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Navigation = ({components}) => {\r\n  return (\r\n    <ul className=\"navigation\">\r\n      {\r\n        components.map( name => {\r\n          return (\r\n            <li key={name}>\r\n              <a href={`#${name}`}>{name}</a>\r\n            </li>\r\n          )\r\n        })\r\n      }\r\n    </ul>\r\n  )\r\n}\r\n\r\nNavigation.propTypes = {\r\n  components: PropTypes.array.isRequired\r\n};\r\n\r\nexport default Navigation;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport hljs from 'highlight.js/lib/highlight'\nimport javascript from 'highlight.js/lib/languages/javascript'\n\n// This way is easy, but adds 170K gzipped to bundle since all langs are included.\n// import Highlight from 'react-highlight';\n\nclass CodeExample extends React.Component {\n  componentDidMount() {\n    hljs.registerLanguage('javascript', javascript);\n    hljs.highlightBlock(this.element);\n  }\n\n  render() {\n    return (\n      <pre ref={ref => { this.element = ref }}>\n        <code>\n          {this.props.children}\n        </code>\n      </pre>\n    )\n  }\n}\n\nCodeExample.propTypes = {\n  children: PropTypes.string.isRequired\n}\n\nexport default CodeExample;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport CodeExample from './CodeExample';\n\nclass Example extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { showCode: false };\n  }\n\n  toggleCode = event => {\n    event.preventDefault();\n    this.setState(prevState => {\n      return {showCode: !prevState.showCode};\n    });\n  }\n\n  render() {\n    const {showCode} = this.state;\n    const {code, description, name} = this.props.example;\n    // Must use CommonJS require to dynamically require because ES Modules must be statically analyzable.\n    const ExampleComponent = require(`./examples/${this.props.componentName}/${name}`).default;\n    return (\n      <div className=\"example\">\n        {description && <h4>{description}</h4> }\n\n        <ExampleComponent />\n\n        <p>\n          <a href=\"#\" onClick={this.toggleCode}>\n            {showCode ? \"Hide\" : \"Show\"} Code\n          </a>\n        </p>\n\n        {showCode && <CodeExample>{code}</CodeExample>}\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  example: PropTypes.object.isRequired,\n  componentName: PropTypes.string.isRequired\n}\n\nexport default Example;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Props = ({props}) => {\n  return (\n    <table className=\"props\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Description</th>\n          <th>Type</th>\n          <th>Default</th>\n          <th>Required</th>\n        </tr>\n      </thead>\n      <tbody>\n      {\n        Object.keys(props).map(key => {\n          return (\n            <tr key={key}>\n              <td>{key}</td>\n              <td>{props[key].description}</td>\n              <td>{props[key].type.name}</td>\n              <td>{props[key].defaultValue && props[key].defaultValue.value}</td>\n              <td>{props[key].required && \"X\"}</td>\n            </tr>\n          );\n        })\n      }\n      </tbody>\n    </table>\n  )\n}\n\nProps.propTypes = {\n  props: PropTypes.object.isRequired\n};\n\nexport default Props;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Example from './Example';\nimport Props from './Props';\n\nconst ComponentPage = ({component}) => {\n  const {name, description, props, examples} = component;\n\n  return (\n    <div className=\"componentpage\">\n      <h2>{name}</h2>\n      <p>{description}</p>\n\n      <h3>Example{examples.length > 1 && \"s\"}</h3>\n      {\n        examples.length > 0 ?\n        examples.map( example => <Example key={example.name} example={example} componentName={name} /> ) :\n        \"No examples exist.\"\n      }\n\n      <h3>Props</h3>\n      {\n        props ?\n        <Props props={props} /> :\n        \"This component accepts no props.\"\n      }\n    </div>\n  )\n};\n\nComponentPage.propTypes = {\n  component: PropTypes.object.isRequired\n};\n\nexport default ComponentPage;\n","import React from 'react';\r\nimport Navigation from './Navigation';\r\nimport ComponentPage from './ComponentPage';\r\nimport componentData from '../../config/componentData';\r\n\r\nexport default class Docs extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      route: window.location.hash.substr(1)\r\n    };\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener('hashchange', () => {\r\n      this.setState({route: window.location.hash.substr(1)})\r\n    })\r\n  }\r\n\r\n  render() {\r\n    const {route} = this.state;\r\n    const component = route ? componentData.filter( component => component.name === route)[0] : componentData[0];\r\n\r\n    return (\r\n      <div>\r\n        <Navigation components={componentData.map(component => component.name)} />\r\n        <ComponentPage component={component} />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Docs from './docs/Docs';\nimport './index.css';\nimport '../node_modules/highlight.js/styles/ocean.css';\n\nReactDOM.render(\n  <Docs />,\n  document.getElementById('root')\n);\n","import React from 'react';\n\n/** SVG Eye Icon */\nfunction EyeIcon() {\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\n  return (\n    <svg width=\"16\" height=\"16\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill=\"#4d4d4d\">\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\n      </g>\n    </svg>\n  )\n}\n\nexport default EyeIcon;\n","export {default} from './EyeIcon';\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport ProgressBar from '../ProgressBar';\nimport EyeIcon from '../EyeIcon';\nimport TextInput from '../TextInput';\n\n/** Password input with integrated label, quality tips, and show password toggle. */\nclass PasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      showPassword: false\n    }\n  }\n\n  toggleShowPassword = event => {\n    this.setState(prevState => {\n      return { showPassword: !prevState.showPassword };\n    });\n    if (event) event.preventDefault();\n  }\n\n  render() {\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\n    const { showPassword } = this.state;\n\n    return (\n      <TextInput\n        htmlId={htmlId}\n        label={label}\n        placeholder={placeholder}\n        type={showPassword ? 'text' : 'password'}\n        onChange={onChange}\n        value={value}\n        maxLength={maxLength}\n        error={error}\n        required\n        {...props}>\n        {\n          showVisibilityToggle &&\n          <a\n            href=\"#\"\n            onClick={this.toggleShowPassword}\n            style={{ marginLeft: 5 }}>\n            <EyeIcon />\n          </a>\n        }\n        {\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\n        }\n      </TextInput>\n    );\n  }\n}\n\nPasswordInput.propTypes = {\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\n  htmlId: PropTypes.string.isRequired,\n\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\n  name: PropTypes.string.isRequired,\n\n  /** Password value */\n  value: PropTypes.any,\n\n  /** Input label */\n  label: PropTypes.string,\n\n  /** Function called when password input value changes */\n  onChange: PropTypes.func.isRequired,\n\n  /** Max password length accepted */\n  maxLength: PropTypes.number,\n\n  /** Placeholder displayed when no password is entered */\n  placeholder: PropTypes.string,\n\n  /** Set to true to show the toggle for displaying the currently entered password */\n  showVisibilityToggle: PropTypes.bool,\n\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\n  quality: PropTypes.number,\n\n  /** Validation error to display */\n  error: PropTypes.string\n};\n\nPasswordInput.defaultProps = {\n  maxLength: 50,\n  showVisibilityToggle: false,\n  label: 'Password'\n};\n\nexport default PasswordInput;\n","export {default} from './PasswordInput';\n","module.exports = [{\n  \"name\": \"EyeIcon\",\n  \"description\": \"SVG Eye Icon\",\n  \"code\": \"import React from 'react';\\n\\n/** SVG Eye Icon */\\nfunction EyeIcon() {\\n  // Attribution: Fabián Alexis at https://commons.wikimedia.org/wiki/File:Antu_view-preview.svg\\n  return (\\n    <svg width=\\\"16\\\" height=\\\"16\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" viewBox=\\\"0 0 22 22\\\">\\n      <g transform=\\\"matrix(.02146 0 0 .02146 1 1)\\\" fill=\\\"#4d4d4d\\\">\\n        <path d=\\\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\\\" />\\n        <circle cx=\\\"466.08\\\" cy=\\\"466.02\\\" r=\\\"134.5\\\" />\\n      </g>\\n    </svg>\\n  )\\n}\\n\\nexport default EyeIcon;\\n\",\n  \"examples\": [{\n    \"name\": \"Example\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport EyeIcon from 'ps-react/EyeIcon';\\n\\nexport default function EyeIconExample() {\\n  return <EyeIcon />;\\n}\\n\"\n  }]\n}, {\n  \"name\": \"HelloWorld\",\n  \"description\": \"A super lame component that says Hello with a custom message.\",\n  \"props\": {\n    \"message\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message to display\",\n      \"defaultValue\": {\n        \"value\": \"'World'\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\r\\nimport PropTypes from 'prop-types';\\r\\n\\r\\n/** A super lame component that says Hello with a custom message. */\\r\\nfunction HelloWorld({message}) {\\r\\n  return <div>Hello {message}</div>\\r\\n}\\r\\n\\r\\nHelloWorld.propTypes = {\\r\\n/** Message to display */\\r\\nmessage: PropTypes.string\\r\\n};\\r\\n\\r\\nHelloWorld.defaultProps = {\\r\\n  message: 'World'\\r\\n};\\r\\n\\r\\nexport default HelloWorld;\\r\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleHelloWorld\",\n    \"description\": \"Custom message\",\n    \"code\": \"import React from 'react';\\nimport HelloWorld from 'ps-react/HelloWorld';\\n\\n\\n/** Custom message */\\nexport default function ExampleHelloWorld() {\\n  return <HelloWorld message=\\\"Pluralsight viewers!\\\" />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"Label\",\n  \"description\": \"Label with required field display, htmlFor, and block styling\",\n  \"props\": {\n    \"htmlFor\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"HTML ID for associated input\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Label text\"\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Display asterisk after label if true\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\n/** Label with required field display, htmlFor, and block styling */\\nfunction Label({htmlFor, label, required}) {\\n  return (\\n    <label style={{display: 'block'}} htmlFor={htmlFor}>\\n      {label} { required && <span style={{color: 'red'}}> *</span> }\\n    </label>\\n  )\\n}\\n\\nLabel.propTypes = {\\n  /** HTML ID for associated input */\\n  htmlFor: PropTypes.string.isRequired,\\n\\n  /** Label text */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Display asterisk after label if true */\\n  required: PropTypes.bool\\n};\\n\\nexport default Label;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Optional label */\\nexport default function ExampleOptional() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" />\\n}\\n\"\n  }, {\n    \"name\": \"ExampleRequired\",\n    \"description\": \"Required label\",\n    \"code\": \"import React from 'react';\\nimport Label from 'ps-react/Label';\\n\\n/** Required label */\\nexport default function ExampleRequired() {\\n  return <Label htmlFor=\\\"test\\\" label=\\\"test\\\" required />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"PasswordInput\",\n  \"description\": \"Password input with integrated label, quality tips, and show password toggle.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used by convention.\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Password value\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Input label\",\n      \"defaultValue\": {\n        \"value\": \"'Password'\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function called when password input value changes\"\n    },\n    \"maxLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Max password length accepted\",\n      \"defaultValue\": {\n        \"value\": \"50\",\n        \"computed\": false\n      }\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder displayed when no password is entered\"\n    },\n    \"showVisibilityToggle\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Set to true to show the toggle for displaying the currently entered password\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"quality\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Display password quality visually via ProgressBar, accepts a number between 0 and 100\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Validation error to display\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport ProgressBar from '../ProgressBar';\\nimport EyeIcon from '../EyeIcon';\\nimport TextInput from '../TextInput';\\n\\n/** Password input with integrated label, quality tips, and show password toggle. */\\nclass PasswordInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showPassword: false\\n    }\\n  }\\n\\n  toggleShowPassword = event => {\\n    this.setState(prevState => {\\n      return { showPassword: !prevState.showPassword };\\n    });\\n    if (event) event.preventDefault();\\n  }\\n\\n  render() {\\n    const { htmlId, value, label, error, onChange, placeholder, maxLength, showVisibilityToggle, quality, ...props } = this.props;\\n    const { showPassword } = this.state;\\n\\n    return (\\n      <TextInput\\n        htmlId={htmlId}\\n        label={label}\\n        placeholder={placeholder}\\n        type={showPassword ? 'text' : 'password'}\\n        onChange={onChange}\\n        value={value}\\n        maxLength={maxLength}\\n        error={error}\\n        required\\n        {...props}>\\n        {\\n          showVisibilityToggle &&\\n          <a\\n            href=\\\"#\\\"\\n            onClick={this.toggleShowPassword}\\n            style={{ marginLeft: 5 }}>\\n            <EyeIcon />\\n          </a>\\n        }\\n        {\\n          value.length > 0 && quality && <ProgressBar percent={quality} width={130} />\\n        }\\n      </TextInput>\\n    );\\n  }\\n}\\n\\nPasswordInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used by convention.*/\\n  name: PropTypes.string.isRequired,\\n\\n  /** Password value */\\n  value: PropTypes.any,\\n\\n  /** Input label */\\n  label: PropTypes.string,\\n\\n  /** Function called when password input value changes */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Max password length accepted */\\n  maxLength: PropTypes.number,\\n\\n  /** Placeholder displayed when no password is entered */\\n  placeholder: PropTypes.string,\\n\\n  /** Set to true to show the toggle for displaying the currently entered password */\\n  showVisibilityToggle: PropTypes.bool,\\n\\n  /** Display password quality visually via ProgressBar, accepts a number between 0 and 100 */\\n  quality: PropTypes.number,\\n\\n  /** Validation error to display */\\n  error: PropTypes.string\\n};\\n\\nPasswordInput.defaultProps = {\\n  maxLength: 50,\\n  showVisibilityToggle: false,\\n  label: 'Password'\\n};\\n\\nexport default PasswordInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleAllFeatures\",\n    \"description\": \"All features enabled\",\n    \"code\": \"import React from 'react';\\nimport PasswordInput from 'ps-react/PasswordInput';\\n\\n/** All features enabled */\\nclass ExampleAllFeatures extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      password: ''\\n    };\\n  }\\n\\n  getQuality() {\\n    const length = this.state.password.length;\\n    return length > 10 ? 100 : length * 10;\\n  }\\n\\n  render() {\\n    return (\\n      <div>\\n        <PasswordInput\\n          htmlId=\\\"password-input-example-all-features\\\"\\n          name=\\\"password\\\"\\n          onChange={ event => this.setState({ password: event.target.value })}\\n          value={this.state.password}\\n          minLength={8}\\n          placeholder=\\\"Enter password\\\"\\n          showVisibilityToggle\\n          quality={this.getQuality()}\\n          {...this.props} />\\n      </div>\\n    )\\n  }\\n}\\n\\nexport default ExampleAllFeatures;\\n\"\n  }]\n}, {\n  \"name\": \"ProgressBar\",\n  \"description\": \"\",\n  \"props\": {\n    \"percent\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Percent of progress completed\"\n    },\n    \"width\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": true,\n      \"description\": \"Bar width\"\n    },\n    \"height\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Bar height\",\n      \"defaultValue\": {\n        \"value\": \"5\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\n\\nclass ProgressBar extends React.Component {\\n  getColor = (percent) => {\\n    if (this.props.percent === 100) return 'green';\\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\\n  }\\n\\n  getWidthAsPercentOfTotalWidth = () => {\\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\\n  }\\n\\n  render() {\\n    const {percent, width, height} = this.props;\\n    return (\\n      <div style={{border: 'solid 1px lightgray', width: width}}>\\n        <div style={{\\n          width: this.getWidthAsPercentOfTotalWidth(),\\n          height,\\n          backgroundColor: this.getColor(percent)\\n        }} />\\n      </div>\\n    );\\n  }\\n}\\n\\nProgressBar.propTypes = {\\n  /** Percent of progress completed */\\n  percent: PropTypes.number.isRequired,\\n\\n  /** Bar width */\\n  width: PropTypes.number.isRequired,\\n\\n  /** Bar height */\\n  height: PropTypes.number\\n};\\n\\nProgressBar.defaultProps = {\\n  height: 5\\n};\\n\\nexport default ProgressBar;\",\n  \"examples\": [{\n    \"name\": \"Example100Percent\",\n    \"description\": \"100% progress and height 20px\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 100% progress and height 20px */\\nexport default function Example100Percent() {\\n  return <ProgressBar percent={100} width={150} height={20} />\\n}\\n\"\n  }, {\n    \"name\": \"Example10Percent\",\n    \"description\": \"10% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 10% progress */\\nexport default function Example10Percent() {\\n  return <ProgressBar percent={10} width={150} />\\n}\\n\"\n  }, {\n    \"name\": \"Example70Percent\",\n    \"description\": \"70% progress\",\n    \"code\": \"import React from 'react';\\nimport ProgressBar from 'ps-react/ProgressBar';\\n\\n/** 70% progress */\\nexport default function Example70Percent() {\\n  return <ProgressBar percent={70} width={150} />\\n}\\n\"\n  }]\n}, {\n  \"name\": \"RegistrationForm\",\n  \"description\": \"Registration form with built-in validation.\",\n  \"props\": {\n    \"confirmationMessage\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Message displayed upon successful submission\",\n      \"defaultValue\": {\n        \"value\": \"\\\"Thanks for registering!\\\"\",\n        \"computed\": false\n      }\n    },\n    \"onSubmit\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Called when form is submitted\"\n    },\n    \"minPasswordLength\": {\n      \"type\": {\n        \"name\": \"number\"\n      },\n      \"required\": false,\n      \"description\": \"Minimum password length\",\n      \"defaultValue\": {\n        \"value\": \"8\",\n        \"computed\": false\n      }\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport TextInput from '../TextInput';\\nimport PasswordInput from '../PasswordInput';\\n\\n/** Registration form with built-in validation. */\\nclass RegistrationForm extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      user: {\\n        email: '',\\n        password: ''\\n      },\\n      errors: {},\\n      submitted: false,\\n    };\\n  }\\n\\n  onChange = (event) => {\\n    const user = this.state.user;\\n    user[event.target.name] = event.target.value;\\n    this.setState({user});\\n  }\\n\\n  // Returns a number from 0 to 100 that represents password quality.\\n  // For simplicity, just returning % of min length entered.\\n  // Could enhance with checks for number, special char, unique characters, etc.\\n  passwordQuality(password) {\\n    if (!password) return null;\\n    if (password.length >= this.props.minPasswordLength) return 100;\\n    const percentOfMinLength = parseInt(password.length/this.props.minPasswordLength * 100, 10);\\n    return percentOfMinLength;\\n  }\\n\\n  validate({email, password}) {\\n    const errors = {};\\n    const {minPasswordLength} = this.props;\\n\\n    if (!email) errors.email = 'Email required.';\\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\\n\\n    this.setState({errors});\\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\\n    return formIsValid;\\n  }\\n\\n  onSubmit = () => {\\n    const {user} = this.state;\\n    const formIsValid = this.validate(user);\\n    if (formIsValid) {\\n      this.props.onSubmit(user);\\n      this.setState({submitted: true});\\n    }\\n  }\\n\\n  render() {\\n    const {errors, submitted} = this.state;\\n    const {email, password} = this.state.user;\\n\\n    return (\\n      submitted ?\\n      <h2>{this.props.confirmationMessage}</h2> :\\n      <div>\\n        <TextInput\\n          htmlId=\\\"registration-form-email\\\"\\n          name=\\\"email\\\"\\n          onChange={this.onChange}\\n          label=\\\"Email\\\"\\n          value={email}\\n          error={errors.email}\\n          required />\\n\\n        <PasswordInput\\n          htmlId=\\\"registration-form-password\\\"\\n          name=\\\"password\\\"\\n          value={password}\\n          onChange={this.onChange}\\n          quality={this.passwordQuality(password)}\\n          showVisibilityToggle\\n          maxLength={50}\\n          error={errors.password} />\\n\\n        <input type=\\\"submit\\\" value=\\\"Register\\\" onClick={this.onSubmit} />\\n      </div>\\n    )\\n  }\\n}\\n\\nRegistrationForm.propTypes = {\\n  /** Message displayed upon successful submission */\\n  confirmationMessage: PropTypes.string,\\n\\n  /** Called when form is submitted */\\n  onSubmit: PropTypes.func.isRequired,\\n\\n  /** Minimum password length */\\n  minPasswordLength: PropTypes.number\\n}\\n\\nRegistrationForm.defaultProps = {\\n  confirmationMessage: \\\"Thanks for registering!\\\",\\n  minPasswordLength: 8\\n};\\n\\nexport default RegistrationForm;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleRegistrationForm\",\n    \"description\": \"\",\n    \"code\": \"import React from 'react';\\nimport RegistrationForm from 'ps-react/RegistrationForm';\\n\\nexport default class ExampleRegistrationForm extends React.Component {\\n  onSubmit = (user) => {\\n    console.log(user);\\n  }\\n\\n  render() {\\n    return <RegistrationForm onSubmit={this.onSubmit} />\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInput\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div style={{marginBottom: 16}}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        style={error && {border: 'solid 1px red'}}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"error\\\" style={{color: 'red'}}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }, {\n    \"name\": \"ExampleOptional\",\n    \"description\": \"Optional TextBox\",\n    \"code\": \"import React from 'react';\\nimport TextInput from 'ps-react/TextInput';\\n\\n/** Optional TextBox */\\nexport default class ExampleOptional extends React.Component {\\n  render() {\\n    return (\\n      <TextInput\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputBEM\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className=\\\"textinput\\\">\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && 'textinput__input--state-error'}\\n        {...props}/>\\n        {children}\\n      {error && <div className=\\\"textinput__error\\\">{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputBEM from 'ps-react/TextInputBEM';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputBEM\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputCSSModules\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styles from './textInput.css';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  return (\\n    <div className={styles.fieldset}>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        className={error && styles.inputError}\\n        {...props}/>\\n        {children}\\n      {error && <div className={styles.error}>{error}</div>}\\n    </div>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputCSSModules from 'ps-react/TextInputCSSModules';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputCSSModules\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}, {\n  \"name\": \"TextInputStyledComponents\",\n  \"description\": \"Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker.\",\n  \"props\": {\n    \"htmlId\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing.\"\n    },\n    \"name\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input name. Recommend setting this to match object's property so a single change handler can be used.\"\n    },\n    \"label\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": true,\n      \"description\": \"Input label\"\n    },\n    \"type\": {\n      \"type\": {\n        \"name\": \"enum\",\n        \"value\": [{\n          \"value\": \"'text'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'number'\",\n          \"computed\": false\n        }, {\n          \"value\": \"'password'\",\n          \"computed\": false\n        }]\n      },\n      \"required\": false,\n      \"description\": \"Input type\",\n      \"defaultValue\": {\n        \"value\": \"\\\"text\\\"\",\n        \"computed\": false\n      }\n    },\n    \"required\": {\n      \"type\": {\n        \"name\": \"bool\"\n      },\n      \"required\": false,\n      \"description\": \"Mark label with asterisk if set to true\",\n      \"defaultValue\": {\n        \"value\": \"false\",\n        \"computed\": false\n      }\n    },\n    \"onChange\": {\n      \"type\": {\n        \"name\": \"func\"\n      },\n      \"required\": true,\n      \"description\": \"Function to call onChange\"\n    },\n    \"placeholder\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"Placeholder to display when empty\"\n    },\n    \"value\": {\n      \"type\": {\n        \"name\": \"any\"\n      },\n      \"required\": false,\n      \"description\": \"Value\"\n    },\n    \"error\": {\n      \"type\": {\n        \"name\": \"string\"\n      },\n      \"required\": false,\n      \"description\": \"String to display when error occurs\"\n    },\n    \"children\": {\n      \"type\": {\n        \"name\": \"node\"\n      },\n      \"required\": false,\n      \"description\": \"Child component to display next to the input\"\n    }\n  },\n  \"code\": \"import React from 'react';\\nimport PropTypes from 'prop-types';\\nimport Label from '../Label';\\nimport styled from 'styled-components';\\n\\n/** Text input with integrated label to enforce consistency in layout, error display, label placement, and required field marker. */\\nfunction TextInput({htmlId, name, label, type = \\\"text\\\", required = false, onChange, placeholder, value, error, children, ...props}) {\\n  const Error = styled.div`\\n    color: red;\\n  `\\n\\n  const Input = styled.input`\\n    border: ${error && 'solid 1px red'};\\n    display: block;\\n  `;\\n\\n  const Fieldset = styled.div`\\n    margin-bottom: 16px;\\n  `;\\n\\n  return (\\n    <Fieldset>\\n      <Label htmlFor={htmlId} label={label} required={required} />\\n      <Input\\n        id={htmlId}\\n        type={type}\\n        name={name}\\n        placeholder={placeholder}\\n        value={value}\\n        onChange={onChange}\\n        {...props}/>\\n        {children}\\n      {error && <Error>{error}</Error>}\\n    </Fieldset>\\n  );\\n};\\n\\nTextInput.propTypes = {\\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\\n  htmlId: PropTypes.string.isRequired,\\n\\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used. */\\n  name: PropTypes.string.isRequired,\\n\\n  /** Input label */\\n  label: PropTypes.string.isRequired,\\n\\n  /** Input type */\\n  type: PropTypes.oneOf(['text', 'number', 'password']),\\n\\n  /** Mark label with asterisk if set to true */\\n  required: PropTypes.bool,\\n\\n  /** Function to call onChange */\\n  onChange: PropTypes.func.isRequired,\\n\\n  /** Placeholder to display when empty */\\n  placeholder: PropTypes.string,\\n\\n  /** Value */\\n  value: PropTypes.any,\\n\\n  /** String to display when error occurs */\\n  error: PropTypes.string,\\n\\n  /** Child component to display next to the input */\\n  children: PropTypes.node\\n};\\n\\nexport default TextInput;\\n\",\n  \"examples\": [{\n    \"name\": \"ExampleError\",\n    \"description\": \"Required TextBox with error\",\n    \"code\": \"import React from 'react';\\nimport TextInputStyledComponents from 'ps-react/TextInputStyledComponents';\\n\\n/** Required TextBox with error */\\nexport default class ExampleError extends React.Component {\\n  render() {\\n    return (\\n      <TextInputStyledComponents\\n        htmlId=\\\"example-optional\\\"\\n        label=\\\"First Name\\\"\\n        name=\\\"firstname\\\"\\n        onChange={() => {}}\\n        required\\n        error=\\\"First name is required.\\\"\\n       />\\n    )\\n  }\\n}\\n\"\n  }]\n}];","import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\nexport default function EyeIconExample() {\n  return <EyeIcon />;\n}\n","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Optional label */\nexport default function ExampleOptional() {\n  return <Label htmlFor=\"test\" label=\"test\" />\n}\n","import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Required label */\nexport default function ExampleRequired() {\n  return <Label htmlFor=\"test\" label=\"test\" required />\n}\n","import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\n/** All features enabled */\nclass ExampleAllFeatures extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      password: ''\n    };\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : length * 10;\n  }\n\n  render() {\n    return (\n      <div>\n        <PasswordInput\n          htmlId=\"password-input-example-all-features\"\n          name=\"password\"\n          onChange={ event => this.setState({ password: event.target.value })}\n          value={this.state.password}\n          minLength={8}\n          placeholder=\"Enter password\"\n          showVisibilityToggle\n          quality={this.getQuality()}\n          {...this.props} />\n      </div>\n    )\n  }\n}\n\nexport default ExampleAllFeatures;\n","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 100% progress and height 20px */\nexport default function Example100Percent() {\n  return <ProgressBar percent={100} width={150} height={20} />\n}\n","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 10% progress */\nexport default function Example10Percent() {\n  return <ProgressBar percent={10} width={150} />\n}\n","import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 70% progress */\nexport default function Example70Percent() {\n  return <ProgressBar percent={70} width={150} />\n}\n"],"sourceRoot":""}